<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://faithhunja.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://faithhunja.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-06-11T11:57:25+00:00</updated><id>https://faithhunja.github.io/feed.xml</id><title type="html">blank</title><subtitle>Faith Hunja&apos;s personal website. </subtitle><entry><title type="html">plotting ternary phase diagrams for solving thermodynamics problems using fqlearn</title><link href="https://faithhunja.github.io/blog/2024/Fqlearn-Ternary-Plot/" rel="alternate" type="text/html" title="plotting ternary phase diagrams for solving thermodynamics problems using fqlearn"/><published>2024-05-29T00:00:00+00:00</published><updated>2024-05-29T00:00:00+00:00</updated><id>https://faithhunja.github.io/blog/2024/Fqlearn-Ternary-Plot</id><content type="html" xml:base="https://faithhunja.github.io/blog/2024/Fqlearn-Ternary-Plot/"><![CDATA[<p>Note: This article originally appeared in the Open Science Lab’s blog <a href="https://opensciencelabs.org/blog/fqlearn-ternary-plot/">here</a>.</p> <hr/> <h2 id="introduction">Introduction</h2> <p>During the Open Science Labs Q1 2024 internship, I worked on the Fqlearn project. <a href="https://github.com/osl-pocs/fqlearn">Fqlearn</a> is an open source python library, currently in development, which aims to facilitate the teaching of mass transfer and thermodynamics.</p> <p>My main task involved developing methods to use a three phase diagram to solve thermodynamics problems graphically. For this purpose, I wrote code for the <a href="https://github.com/osl-pocs/fqlearn/blob/main/src/fqlearn/ThreeComponent.py"><code class="language-plaintext highlighter-rouge">ThreeComponent.py</code></a> class, as well as corresponding <a href="https://github.com/osl-pocs/fqlearn/blob/main/tests/test_three_component.py">tests</a> for the class.</p> <h3 id="ternary-phase-diagram">Ternary phase diagram</h3> <p>A ternary plot, ternary graph, triangle plot, simplex plot, or Gibbs triangle is a barycentric plot on three variables which sum to a constant. It graphically depicts the ratios of the three variables as positions in an equilateral triangle. It is used in physical chemistry, petrology, mineralogy, metallurgy, and other physical sciences to show the compositions of systems composed of three species. Ternary plots are tools for analyzing compositional data in the three-dimensional case [<a href="https://en.wikipedia.org/wiki/Ternary_plot">1</a>].</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog_pics/2024-05-29-Fqlearn-Ternary-Plot/plot-480.webp 480w,/assets/img/blog_pics/2024-05-29-Fqlearn-Ternary-Plot/plot-800.webp 800w,/assets/img/blog_pics/2024-05-29-Fqlearn-Ternary-Plot/plot-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/blog_pics/2024-05-29-Fqlearn-Ternary-Plot/plot.png" width="100%" height="auto" alt="A ternary plot" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> <figcaption class="caption">A ternary plot diagram, plotted using Fqlearn</figcaption> </figure> <p>In a ternary plot, the values of the three variables a, b, and c must sum to some constant, K. Usually, this constant is represented as 1.0 or 100%. Because a + b + c = K for all substances being graphed, any one variable is not independent of the others, so only two variables must be known to find a sample’s point on the graph: for instance, c must be equal to K − a − b. Because the three numerical values cannot vary independently—there are only two degrees of freedom—it is possible to graph the combinations of all three variables in only two dimensions.</p> <p>The advantage of using a ternary plot for depicting chemical compositions is that three variables can be conveniently plotted in a two-dimensional graph. Ternary plots can also be used to create phase diagrams by outlining the composition regions on the plot where different phases exist [<a href="https://en.wikipedia.org/wiki/Ternary_plot">1</a>].</p> <h2 id="methods">Methods</h2> <p>To begin with, we import the libraries required for plotting ternary phase diagrams. We used <a href="https://github.com/marcharper/python-ternary"><code class="language-plaintext highlighter-rouge">python-ternary</code></a>, a plotting library that uses matplotlib to make ternary plots. Using this library, many features could be added to the fqlearn library for various purposes, as described in this article.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">matplotlib</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">ternary</span>
<span class="kn">from</span> <span class="n">scipy.interpolate</span> <span class="kn">import</span> <span class="n">CubicSpline</span>
</code></pre></div></div> <p>Then we define our class, <code class="language-plaintext highlighter-rouge">ThreeComponent</code>, in which we create some functions, a few of which will be explained in this article. To see how these functions work, we create some variables, which are lists containing an unordered list of tuples, each containing 3 values, representing the x, y and z values in the form <code class="language-plaintext highlighter-rouge">[(x,y,z)]</code>.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">right_eq_line</span> <span class="o">=</span> <span class="p">[(</span><span class="mf">0.02</span><span class="p">,</span> <span class="mf">0.02</span><span class="p">,</span> <span class="mf">0.96</span><span class="p">),</span> <span class="p">(</span><span class="mf">0.025</span><span class="p">,</span> <span class="mf">0.06</span><span class="p">,</span> <span class="mf">0.915</span><span class="p">),</span> <span class="p">(</span><span class="mf">0.03</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.87</span><span class="p">),</span> 
                <span class="p">(</span><span class="mf">0.035</span><span class="p">,</span> <span class="mf">0.16</span><span class="p">,</span> <span class="mf">0.805</span><span class="p">),</span> <span class="p">(</span><span class="mf">0.04</span><span class="p">,</span> <span class="mf">0.2</span><span class="p">,</span> <span class="mf">0.76</span><span class="p">),</span> <span class="p">(</span><span class="mf">0.045</span><span class="p">,</span> <span class="mf">0.25</span><span class="p">,</span> <span class="mf">0.705</span><span class="p">),</span> 
                <span class="p">(</span><span class="mf">0.05</span><span class="p">,</span> <span class="mf">0.3</span><span class="p">,</span> <span class="mf">0.65</span><span class="p">),</span> <span class="p">(</span><span class="mf">0.07</span><span class="p">,</span> <span class="mf">0.36</span><span class="p">,</span> <span class="mf">0.57</span><span class="p">),</span> <span class="p">(</span><span class="mf">0.09</span><span class="p">,</span> <span class="mf">0.4</span><span class="p">,</span> <span class="mf">0.51</span><span class="p">),</span> 
                <span class="p">(</span><span class="mf">0.14</span><span class="p">,</span> <span class="mf">0.48</span><span class="p">,</span> <span class="mf">0.38</span><span class="p">),</span> <span class="p">(</span><span class="mf">0.33</span><span class="p">,</span> <span class="mf">0.49</span><span class="p">,</span> <span class="mf">0.18</span><span class="p">)]</span>
<span class="n">left_eq_line</span> <span class="o">=</span> <span class="p">[(</span><span class="mf">0.97</span><span class="p">,</span> <span class="mf">0.01</span><span class="p">,</span> <span class="mf">0.02</span><span class="p">),</span> <span class="p">(</span><span class="mf">0.95</span><span class="p">,</span> <span class="mf">0.03</span><span class="p">,</span> <span class="mf">0.02</span><span class="p">),</span> <span class="p">(</span><span class="mf">0.91</span><span class="p">,</span> <span class="mf">0.06</span><span class="p">,</span> <span class="mf">0.03</span><span class="p">),</span> 
                <span class="p">(</span><span class="mf">0.88</span><span class="p">,</span> <span class="mf">0.09</span><span class="p">,</span> <span class="mf">0.03</span><span class="p">),</span> <span class="p">(</span><span class="mf">0.83</span><span class="p">,</span> <span class="mf">0.13</span><span class="p">,</span> <span class="mf">0.04</span><span class="p">),</span> <span class="p">(</span><span class="mf">0.79</span><span class="p">,</span> <span class="mf">0.17</span><span class="p">,</span> <span class="mf">0.04</span><span class="p">),</span> 
                <span class="p">(</span><span class="mf">0.745</span><span class="p">,</span> <span class="mf">0.2</span><span class="p">,</span> <span class="mf">0.055</span><span class="p">),</span> <span class="p">(</span><span class="mf">0.68</span><span class="p">,</span> <span class="mf">0.26</span><span class="p">,</span> <span class="mf">0.06</span><span class="p">),</span> <span class="p">(</span><span class="mf">0.62</span><span class="p">,</span> <span class="mf">0.3</span><span class="p">,</span> <span class="mf">0.08</span><span class="p">),</span> 
                <span class="p">(</span><span class="mf">0.49</span><span class="p">,</span> <span class="mf">0.4</span><span class="p">,</span> <span class="mf">0.11</span><span class="p">),</span> <span class="p">(</span><span class="mf">0.33</span><span class="p">,</span> <span class="mf">0.49</span><span class="p">,</span> <span class="mf">0.18</span><span class="p">)]</span>

<span class="n">points</span> <span class="o">=</span> <span class="n">left_eq_line</span> <span class="o">+</span> <span class="n">right_eq_line</span>
</code></pre></div></div> <p>We also set the scale of our plot to 100 in the <code class="language-plaintext highlighter-rouge">__init__ function</code>. This is the value that each tuple must sum up to.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">self</span><span class="p">.</span><span class="n">scale</span> <span class="o">=</span> <span class="mi">100</span>
</code></pre></div></div> <p>To start using the Three Component class, we can use the following code:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">fqlearn</span> <span class="kn">import</span> <span class="n">ThreeComponent</span>
<span class="n">model</span> <span class="o">=</span> <span class="nc">ThreeComponent</span><span class="p">()</span>
</code></pre></div></div> <p>We can then call the functions as needed. We define a function <code class="language-plaintext highlighter-rouge">sort_points</code> that sorts the values it receives as an argument. The points are added using the <code class="language-plaintext highlighter-rouge">add_point</code> function, which ensures that the argument is not an empty list, removes duplicate tuples, and multiplies each point in the tuple by the scale.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">add_point</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">points</span><span class="p">):</span>
    <span class="c1"># Check if points is an empty list
</span>    <span class="k">if</span> <span class="ow">not</span> <span class="n">points</span><span class="p">:</span>
        <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span>
            <span class="sh">"</span><span class="s">The </span><span class="sh">'</span><span class="s">points</span><span class="sh">'</span><span class="s"> list cannot be empty. Please provide valid points.</span><span class="sh">"</span>
        <span class="p">)</span>

    <span class="c1"># Remove duplicate points
</span>    <span class="n">points_to_plot</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">set</span><span class="p">(</span><span class="n">points</span><span class="p">))</span>

    <span class="c1"># Multiply each point by the scale
</span>    <span class="n">points_to_plot</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">self</span><span class="p">.</span><span class="n">scale</span><span class="p">,</span> <span class="n">y</span> <span class="o">*</span> <span class="n">self</span><span class="p">.</span><span class="n">scale</span><span class="p">,</span> <span class="n">z</span> <span class="o">*</span> <span class="n">self</span><span class="p">.</span><span class="n">scale</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span> <span class="ow">in</span> <span class="n">points_to_plot</span>
    <span class="p">]</span>

    <span class="c1"># Add the points to the plot
</span>    <span class="n">self</span><span class="p">.</span><span class="n">tax</span><span class="p">.</span><span class="nf">scatter</span><span class="p">(</span><span class="n">points_to_plot</span><span class="p">,</span> <span class="n">linewidth</span><span class="o">=</span><span class="mf">1.0</span><span class="p">,</span> <span class="n">marker</span><span class="o">=</span><span class="sh">"</span><span class="s">o</span><span class="sh">"</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">"</span><span class="s">red</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">points_to_plot</span>
</code></pre></div></div> <p>The <code class="language-plaintext highlighter-rouge">sort_points</code> function sorts the tuples using the x value in each tuple, then adds them to a new list. This allows us to have the tuples sorted in ascending order along the x-axis. The function also ensures that all points in the tuple(s) in the sorted list add up to the scale.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">sort_points</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">points</span><span class="p">):</span>
    <span class="n">points_to_plot</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">add_point</span><span class="p">(</span><span class="n">points</span><span class="p">)</span>
    <span class="c1"># Sort the points in ascending order
</span>    <span class="n">xyz</span> <span class="o">=</span> <span class="p">[(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span> <span class="ow">in</span> <span class="n">points_to_plot</span><span class="p">]</span>
    <span class="n">sorted_points</span> <span class="o">=</span> <span class="nf">sorted</span><span class="p">(</span><span class="n">xyz</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">m</span><span class="p">:</span> <span class="n">m</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>

    <span class="c1"># New list to store sorted points
</span>    <span class="n">new_sorted_points</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="c1"># Check if the points are in a list of lists or a single list
</span>    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span>
        <span class="n">sorted_points</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">float</span><span class="p">)</span>
    <span class="p">):</span>  <span class="c1"># Check if the first element of points is a number
</span>        <span class="k">assert</span> <span class="n">sorted_points</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">sorted_points</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">sorted_points</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="n">self</span><span class="p">.</span><span class="n">scale</span>
        <span class="n">new_sorted_points</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">sorted_points</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="c1"># If the points are in a list of lists
</span>        <span class="k">for</span> <span class="n">sorted_point</span> <span class="ow">in</span> <span class="n">sorted_points</span><span class="p">:</span>
            <span class="k">assert</span> <span class="n">sorted_point</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">sorted_point</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">sorted_point</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="n">self</span><span class="p">.</span><span class="n">scale</span>
            <span class="n">new_sorted_points</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">sorted_point</span><span class="p">)</span>

    <span class="c1"># Add the points to the plot
</span>    <span class="n">self</span><span class="p">.</span><span class="n">tax</span><span class="p">.</span><span class="nf">scatter</span><span class="p">(</span><span class="n">new_sorted_points</span><span class="p">,</span> <span class="n">linewidth</span><span class="o">=</span><span class="mf">1.0</span><span class="p">,</span> <span class="n">marker</span><span class="o">=</span><span class="sh">"</span><span class="s">o</span><span class="sh">"</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">"</span><span class="s">red</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">new_sorted_points</span>
</code></pre></div></div> <p>If we print the returned values, we get the following output, where each tuple is arranged in ascending order according to the x values:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">[(2.0, 2.0, 96.0), (2.5, 6.0, 91.5), (3.0, 10.0, 87.0), (3.5000000000000004, 16.0, 80.5), (4.0, 20.0, 76.0), (4.5, 25.0, 70.5), (5.0, 30.0, 65.0), (7.000000000000001, 36.0, 56.99999999999999), (9.0, 40.0, 51.0), (14.000000000000002, 48.0, 38.0), (33.0, 49.0, 18.0), (49.0, 40.0, 11.0), (62.0, 30.0, 8.0), (68.0, 26.0, 6.0), (74.5, 20.0, 5.5), (79.0, 17.0, 4.0), (83.0, 13.0, 4.0), (88.0, 9.0, 3.0), (91.0, 6.0, 3.0), (95.0, 3.0, 2.0), (97.0, 1.0, 2.0)]
</span></code></pre></div></div> <p>We can then call the <code class="language-plaintext highlighter-rouge">plot</code> function, to plot the ternary phase diagram in order to visualize the plotted points.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">plot</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
    <span class="n">self</span><span class="p">.</span><span class="n">tax</span><span class="p">.</span><span class="nf">clear_matplotlib_ticks</span><span class="p">()</span>
    <span class="n">self</span><span class="p">.</span><span class="n">tax</span><span class="p">.</span><span class="nf">get_axes</span><span class="p">().</span><span class="nf">axis</span><span class="p">(</span><span class="sh">"</span><span class="s">off</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">self</span><span class="p">.</span><span class="n">tax</span><span class="p">.</span><span class="nf">legend</span><span class="p">()</span>
    <span class="n">ternary</span><span class="p">.</span><span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div> <p>We obtain the ternary plot shown below:</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog_pics/2024-05-29-Fqlearn-Ternary-Plot/add_point-480.webp 480w,/assets/img/blog_pics/2024-05-29-Fqlearn-Ternary-Plot/add_point-800.webp 800w,/assets/img/blog_pics/2024-05-29-Fqlearn-Ternary-Plot/add_point-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/blog_pics/2024-05-29-Fqlearn-Ternary-Plot/add_point.png" width="100%" height="auto" alt="Points added to the ternary plot" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> <figcaption class="caption">Visualizing points on the ternary plot</figcaption> </figure> <p>We define the <code class="language-plaintext highlighter-rouge">composition_line</code> function which plots equilibrium lines joining the tuples corresponding to the two compositions in each index in the list of tuples. This function first multiplies each point in each tuple by the scale, then sorts the list of the left composition in ascending order, and the list of the right composition in descending order. For each tuple, the x, y and z values are extracted, then joined using equilibrium lines.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">composition_line</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">left_eq_line</span><span class="p">,</span> <span class="n">right_eq_line</span><span class="p">):</span>
    <span class="c1"># Multiply each point by the scale
</span>    <span class="n">new_left_eq_line</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">self</span><span class="p">.</span><span class="n">scale</span><span class="p">,</span> <span class="n">y</span> <span class="o">*</span> <span class="n">self</span><span class="p">.</span><span class="n">scale</span><span class="p">,</span> <span class="n">z</span> <span class="o">*</span> <span class="n">self</span><span class="p">.</span><span class="n">scale</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span> <span class="ow">in</span> <span class="n">left_eq_line</span>
    <span class="p">]</span>
    <span class="n">new_right_eq_line</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">self</span><span class="p">.</span><span class="n">scale</span><span class="p">,</span> <span class="n">y</span> <span class="o">*</span> <span class="n">self</span><span class="p">.</span><span class="n">scale</span><span class="p">,</span> <span class="n">z</span> <span class="o">*</span> <span class="n">self</span><span class="p">.</span><span class="n">scale</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span> <span class="ow">in</span> <span class="n">right_eq_line</span>
    <span class="p">]</span>

    <span class="c1"># Sort the left points in ascending order
</span>    <span class="n">xyz</span> <span class="o">=</span> <span class="p">[(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span> <span class="ow">in</span> <span class="n">new_left_eq_line</span><span class="p">]</span>
    <span class="n">sorted_left_eq_line</span> <span class="o">=</span> <span class="nf">sorted</span><span class="p">(</span><span class="n">xyz</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">m</span><span class="p">:</span> <span class="n">m</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
    <span class="c1"># Sort the right points in descending order
</span>    <span class="n">xyz</span> <span class="o">=</span> <span class="p">[(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span> <span class="ow">in</span> <span class="n">new_right_eq_line</span><span class="p">]</span>
    <span class="n">sorted_right_eq_line</span> <span class="o">=</span> <span class="nf">sorted</span><span class="p">(</span><span class="n">xyz</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">m</span><span class="p">:</span> <span class="n">m</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">reverse</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">left_eq_line</span><span class="p">)):</span>
        <span class="c1"># Ensure all points add up to the scale
</span>        <span class="n">pointA</span> <span class="o">=</span> <span class="n">sorted_left_eq_line</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="k">assert</span> <span class="nf">sum</span><span class="p">(</span><span class="n">pointA</span><span class="p">)</span> <span class="o">==</span> <span class="n">self</span><span class="p">.</span><span class="n">scale</span>
        <span class="n">pointB</span> <span class="o">=</span> <span class="n">sorted_right_eq_line</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="k">assert</span> <span class="nf">sum</span><span class="p">(</span><span class="n">pointB</span><span class="p">)</span> <span class="o">==</span> <span class="n">self</span><span class="p">.</span><span class="n">scale</span>

        <span class="c1"># Extract x and y coordinates of each point
</span>        <span class="n">xA</span><span class="p">,</span> <span class="n">yA</span><span class="p">,</span> <span class="n">zA</span> <span class="o">=</span> <span class="n">pointA</span>
        <span class="n">xB</span><span class="p">,</span> <span class="n">yB</span><span class="p">,</span> <span class="n">zB</span> <span class="o">=</span> <span class="n">pointB</span>

        <span class="c1"># Add the two points to the plot
</span>        <span class="n">self</span><span class="p">.</span><span class="n">tax</span><span class="p">.</span><span class="nf">scatter</span><span class="p">([(</span><span class="n">xA</span><span class="p">,</span> <span class="n">yA</span><span class="p">,</span> <span class="n">zA</span><span class="p">),</span> <span class="p">(</span><span class="n">xB</span><span class="p">,</span> <span class="n">yB</span><span class="p">,</span> <span class="n">zB</span><span class="p">)],</span> <span class="n">marker</span><span class="o">=</span><span class="sh">"</span><span class="s">s</span><span class="sh">"</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">"</span><span class="s">red</span><span class="sh">"</span><span class="p">)</span>
        <span class="c1"># Plot a line connecting the two points
</span>        <span class="n">self</span><span class="p">.</span><span class="n">tax</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span>
            <span class="p">[(</span><span class="n">xA</span><span class="p">,</span> <span class="n">yA</span><span class="p">,</span> <span class="n">zA</span><span class="p">),</span> <span class="p">(</span><span class="n">xB</span><span class="p">,</span> <span class="n">yB</span><span class="p">,</span> <span class="n">zB</span><span class="p">)],</span>
            <span class="n">linewidth</span><span class="o">=</span><span class="mf">1.0</span><span class="p">,</span>
            <span class="n">color</span><span class="o">=</span><span class="sh">"</span><span class="s">blue</span><span class="sh">"</span><span class="p">,</span>
        <span class="p">)</span>
</code></pre></div></div> <p>We obtain the following ternary plot:</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog_pics/2024-05-29-Fqlearn-Ternary-Plot/solute_points-480.webp 480w,/assets/img/blog_pics/2024-05-29-Fqlearn-Ternary-Plot/solute_points-800.webp 800w,/assets/img/blog_pics/2024-05-29-Fqlearn-Ternary-Plot/solute_points-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/blog_pics/2024-05-29-Fqlearn-Ternary-Plot/solute_points.png" width="100%" height="auto" alt="Equilibrium line" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> <figcaption class="caption">Equilibrium lines joining two compositions</figcaption> </figure> <p>We can calculate the slope of the equilibrium lines plotted above using the function <code class="language-plaintext highlighter-rouge">eq_slope</code>. We loop through each tuple of each composition in each index, extract the x and y values, and find the slope, by dividing the change in y by the change in x for each index. The function returns the average slope.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">eq_slope</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">right_eq_line</span><span class="p">,</span> <span class="n">left_eq_line</span><span class="p">):</span>
    <span class="c1"># Multiply each point by the scale
</span>    <span class="n">right_eq_line</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">self</span><span class="p">.</span><span class="n">scale</span><span class="p">,</span> <span class="n">y</span> <span class="o">*</span> <span class="n">self</span><span class="p">.</span><span class="n">scale</span><span class="p">,</span> <span class="n">z</span> <span class="o">*</span> <span class="n">self</span><span class="p">.</span><span class="n">scale</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span> <span class="ow">in</span> <span class="n">right_eq_line</span>
    <span class="p">]</span>
    <span class="n">left_eq_line</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">self</span><span class="p">.</span><span class="n">scale</span><span class="p">,</span> <span class="n">y</span> <span class="o">*</span> <span class="n">self</span><span class="p">.</span><span class="n">scale</span><span class="p">,</span> <span class="n">z</span> <span class="o">*</span> <span class="n">self</span><span class="p">.</span><span class="n">scale</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span> <span class="ow">in</span> <span class="n">left_eq_line</span>
    <span class="p">]</span>

    <span class="c1"># Sort the right points in ascending order
</span>    <span class="n">xyz</span> <span class="o">=</span> <span class="p">[(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span> <span class="ow">in</span> <span class="n">right_eq_line</span><span class="p">]</span>
    <span class="n">right_eq</span> <span class="o">=</span> <span class="nf">sorted</span><span class="p">(</span><span class="n">xyz</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">m</span><span class="p">:</span> <span class="n">m</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
    <span class="c1"># Sort the left points in descending order
</span>    <span class="n">xyz</span> <span class="o">=</span> <span class="p">[(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span> <span class="ow">in</span> <span class="n">left_eq_line</span><span class="p">]</span>
    <span class="n">left_eq</span> <span class="o">=</span> <span class="nf">sorted</span><span class="p">(</span><span class="n">xyz</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">m</span><span class="p">:</span> <span class="n">m</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">reverse</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

    <span class="n">slopes</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">right_eq_line</span><span class="p">)):</span>
        <span class="n">pointA</span> <span class="o">=</span> <span class="n">right_eq</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="k">assert</span> <span class="nf">sum</span><span class="p">(</span><span class="n">pointA</span><span class="p">)</span> <span class="o">==</span> <span class="n">self</span><span class="p">.</span><span class="n">scale</span>
        <span class="n">pointB</span> <span class="o">=</span> <span class="n">left_eq</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="k">assert</span> <span class="nf">sum</span><span class="p">(</span><span class="n">pointB</span><span class="p">)</span> <span class="o">==</span> <span class="n">self</span><span class="p">.</span><span class="n">scale</span>

        <span class="c1"># Extract x and y coordinates of each point
</span>        <span class="n">xA</span><span class="p">,</span> <span class="n">yA</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">pointA</span>
        <span class="n">xB</span><span class="p">,</span> <span class="n">yB</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">pointB</span>

        <span class="c1"># Calculate the slope of the line joining the points
</span>        <span class="k">if</span> <span class="n">xA</span> <span class="o">-</span> <span class="n">xB</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>  <span class="c1"># Check for vertical line
</span>            <span class="n">slope</span> <span class="o">=</span> <span class="p">(</span><span class="n">yA</span> <span class="o">-</span> <span class="n">yB</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="n">xA</span> <span class="o">-</span> <span class="n">xB</span><span class="p">)</span>
            <span class="n">slopes</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">slope</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="c1"># For vertical lines, return None for slope
</span>            <span class="n">slopes</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Slope = </span><span class="sh">"</span><span class="p">,</span> <span class="n">slopes</span><span class="p">)</span>

    <span class="c1"># Calculate average of the slopes
</span>    <span class="n">avg_slope</span> <span class="o">=</span> <span class="nf">sum</span><span class="p">(</span><span class="n">slopes</span><span class="p">)</span> <span class="o">/</span> <span class="nf">len</span><span class="p">(</span><span class="n">slopes</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Average slope = </span><span class="sh">"</span><span class="p">,</span> <span class="n">avg_slope</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">avg_slope</span>
</code></pre></div></div> <p>We obtain the following output:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">Slope =  [-0.010526315789473684, -0.032432432432432434, -0.045454545454545456, -0.08284023668639054, -0.08860759493670886, -0.10738255033557047, -0.14388489208633093, -0.16393442622950818, -0.18867924528301888, -0.22857142857142856, 0]
Average slope =  -0.09930124252776436
</span></code></pre></div></div> <p>We can also plot a ternary phase diagram with an equilibrium line joining all the plotted points, like in a graph, by calling the <code class="language-plaintext highlighter-rouge">add_eq_line</code> function.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">add_eq_line</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">right_eq_line</span><span class="p">,</span> <span class="n">left_eq_line</span><span class="p">):</span>
    <span class="c1"># Add the points
</span>    <span class="n">self</span><span class="p">.</span><span class="n">right_eq_line</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">sort_points</span><span class="p">(</span><span class="n">right_eq_line</span><span class="p">)</span>
    <span class="n">self</span><span class="p">.</span><span class="n">left_eq_line</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">sort_points</span><span class="p">(</span><span class="n">left_eq_line</span><span class="p">)</span>
    <span class="n">eq_line</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">right_eq_line</span> <span class="o">+</span> <span class="n">self</span><span class="p">.</span><span class="n">left_eq_line</span>

    <span class="c1"># Remove duplicate points
</span>    <span class="n">eq_line_plot</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">set</span><span class="p">(</span><span class="n">eq_line</span><span class="p">))</span>

    <span class="c1"># Sort the points in ascending order
</span>    <span class="n">xyz</span> <span class="o">=</span> <span class="p">[(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span> <span class="ow">in</span> <span class="n">eq_line_plot</span><span class="p">]</span>
    <span class="n">sorted_eq</span> <span class="o">=</span> <span class="nf">sorted</span><span class="p">(</span><span class="n">xyz</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">m</span><span class="p">:</span> <span class="n">m</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>

    <span class="n">self</span><span class="p">.</span><span class="n">tax</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">sorted_eq</span><span class="p">,</span> <span class="n">linewidth</span><span class="o">=</span><span class="mf">1.0</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">"</span><span class="s">blue</span><span class="sh">"</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">Equilibrium line</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <p>We get the ternary plot below:</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog_pics/2024-05-29-Fqlearn-Ternary-Plot/eq_line-480.webp 480w,/assets/img/blog_pics/2024-05-29-Fqlearn-Ternary-Plot/eq_line-800.webp 800w,/assets/img/blog_pics/2024-05-29-Fqlearn-Ternary-Plot/eq_line-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/blog_pics/2024-05-29-Fqlearn-Ternary-Plot/eq_line.png" width="100%" height="auto" alt="Joining points with an equilibrium line" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> <figcaption class="caption">Points joined using an equilibrium line</figcaption> </figure> <p>However, the equilibrium line plotted above is not smooth. To generate a smooth line, we use the <code class="language-plaintext highlighter-rouge">interpolate_points</code> function.</p> <p>We first sort the points using the <code class="language-plaintext highlighter-rouge">sort_points</code> function. Then we extract the x and y values from the sorted points, ignoring the z values which will not be used. Variable <code class="language-plaintext highlighter-rouge">x</code> becomes a list of all x values and variable <code class="language-plaintext highlighter-rouge">y</code> becomes a list of all y values. After that, we perform cubic spline interpolation on the x and y values using the CubicSpline function, imported from the scipy.interpolate module of SciPy’s library [<a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.CubicSpline.html">2</a>]. <code class="language-plaintext highlighter-rouge">bc_type="natural"</code> specifies the natural boundary conditions, meaning the second derivative of the spline at the boundaries will be set to zero. <code class="language-plaintext highlighter-rouge">x_cubic</code> is set to a linearly spaced array of values ranging from 0 to 100 with 100 number of points, which is the value of <code class="language-plaintext highlighter-rouge">self.scale</code>, and <code class="language-plaintext highlighter-rouge">y_cubic</code> contains the corresponding y values interpolated using the cubic spline function <code class="language-plaintext highlighter-rouge">f</code>. Then we filter out any points outside the specified range of 0 to 100 for both <code class="language-plaintext highlighter-rouge">x_cubic</code> and <code class="language-plaintext highlighter-rouge">y_cubic</code>, and use the <code class="language-plaintext highlighter-rouge">np.column_stack</code> function to combine <code class="language-plaintext highlighter-rouge">x_cubic</code> and <code class="language-plaintext highlighter-rouge">y_cubic</code> into a single 2D array, which is returned by the function as <code class="language-plaintext highlighter-rouge">interpolated_points</code>.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">interpolate_points</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">points</span><span class="p">):</span>
    <span class="n">sorted_points</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">sort_points</span><span class="p">(</span><span class="n">points</span><span class="p">)</span>

    <span class="c1"># Cubic spline interpolation
</span>    <span class="n">x</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">_</span> <span class="ow">in</span> <span class="n">sorted_points</span><span class="p">]</span>
    <span class="n">y</span> <span class="o">=</span> <span class="p">[</span><span class="n">y</span> <span class="k">for</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">_</span> <span class="ow">in</span> <span class="n">sorted_points</span><span class="p">]</span>

    <span class="n">f</span> <span class="o">=</span> <span class="nc">CubicSpline</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">bc_type</span><span class="o">=</span><span class="sh">"</span><span class="s">natural</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">x_cubic</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">scale</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">scale</span><span class="p">)</span>
    <span class="n">y_cubic</span> <span class="o">=</span> <span class="nf">f</span><span class="p">(</span><span class="n">x_cubic</span><span class="p">)</span>

    <span class="c1"># Remove negative points
</span>    <span class="n">interpolated_points</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="ow">in</span> <span class="n">np</span><span class="p">.</span><span class="nf">column_stack</span><span class="p">((</span><span class="n">x_cubic</span><span class="p">,</span> <span class="n">y_cubic</span><span class="p">))</span>
        <span class="k">if</span> <span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">self</span><span class="p">.</span><span class="n">scale</span> <span class="ow">and</span> <span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">self</span><span class="p">.</span><span class="n">scale</span>
    <span class="p">]</span>

    <span class="k">return</span> <span class="n">interpolated_points</span>
</code></pre></div></div> <p>Printing the output of the function, we obtain the output below, showing the interpolated points:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">[[2.0202020202020203, 2.1691472640742586], [3.0303030303030303, 10.329514857514697], [4.040404040404041, 20.340775738329878], [5.050505050505051, 30.41604117022922], [6.0606060606060606, 34.9725244736696], [7.070707070707071, 36.0788150823154], [8.080808080808081, 37.866519430111914], [9.090909090909092, 40.207639450509895], [10.101010101010102, 42.33305618527275], [11.111111111111112, 44.15164951408806], [12.121212121212121, 45.70152886497335], [13.131313131313131, 47.02080366594621], [14.141414141414142, 48.147569717383064], [15.151515151515152, 49.11261947676193], [16.161616161616163, 49.927423194367556], [17.171717171717173, 50.600292249170636], [18.181818181818183, 51.13953802014185], [19.191919191919194, 51.55347188625187], [20.202020202020204, 51.850405226471395], [21.212121212121215, 52.038649419771076], [22.222222222222225, 52.12651584512162], [23.232323232323235, 52.122315881493684], [24.242424242424242, 52.03436090785797], [25.252525252525253, 51.87096230318516], [26.262626262626263, 51.640431446445916], [27.272727272727273, 51.35107971661092], [28.282828282828284, 51.011218492650855], [29.292929292929294, 50.62915915353641], [30.303030303030305, 50.213213078238255], [31.313131313131315, 49.771691645727074], [32.323232323232325, 49.31290623497355], [33.333333333333336, 48.84510804535748], [34.343434343434346, 48.37284930204433], [35.35353535353536, 47.89489752249601], [36.36363636363637, 47.409516570717145], [37.37373737373738, 46.91497031071236], [38.38383838383839, 46.40952260648627], [39.3939393939394, 45.891437322043494], [40.40404040404041, 45.358978321388655], [41.41414141414142, 44.81040946852637], [42.42424242424243, 44.24399462746127], [43.43434343434344, 43.65799766219796], [44.44444444444445, 43.050682436741056], [45.45454545454546, 42.4203128150952], [46.46464646464647, 41.765152661265006], [47.47474747474748, 41.083465839255076], [48.484848484848484, 40.373516213070054], [49.494949494949495, 39.63371670174959], [50.505050505050505, 38.86607499990182], [51.515151515151516, 38.076288591118626], [52.525252525252526, 37.270223020764256], [53.535353535353536, 36.45374383420295], [54.54545454545455, 35.63271657679892], [55.55555555555556, 34.81300679391643], [56.56565656565657, 34.000480030919704], [57.57575757575758, 33.201001833172974], [58.58585858585859, 32.42043774604049], [59.5959595959596, 31.664653314886465], [60.60606060606061, 30.93951408507516], [61.61616161616162, 30.250885601970786], [62.62626262626263, 29.60336029919871], [63.63636363636364, 28.983912044764498], [64.64646464646465, 28.366648419185424], [65.65656565656566, 27.72538388514391], [66.66666666666667, 27.0339329053224], [67.67676767676768, 26.26610994240331], [68.68686868686869, 25.39917799115036], [69.6969696969697, 24.44860975371087], [70.70707070707071, 23.453665293050822], [71.71717171717172, 22.45396405508463], [72.72727272727273, 21.489125485726685], [73.73737373737374, 20.59876903089141], [74.74747474747475, 19.822230508859366], [75.75757575757576, 19.162761793258028], [76.76767676767678, 18.552564414178864], [77.77777777777779, 17.915539652280298], [78.7878787878788, 17.175588788220747], [79.7979797979798, 16.27016258697005], [80.80808080808082, 15.240129979240486], [81.81818181818183, 14.174027140890017], [82.82828282828284, 13.160644754568583], [83.83838383838385, 12.27416074496895], [84.84848484848486, 11.4905826393484], [85.85858585858587, 10.745488901010873], [86.86868686868688, 9.974332435176901], [87.87878787878789, 9.112566147067007], [88.8888888888889, 8.11684009659671], [89.89898989898991, 7.065697936762742], [90.90909090909092, 6.081168542871885], [91.91919191919193, 5.257512388433542], [92.92929292929294, 4.543021889369125], [93.93939393939395, 3.8382841183777483], [94.94949494949496, 3.043859233178794], [95.95959595959597, 2.0885249765853326], [96.96969696969697, 1.0322241687602192]]
</span></code></pre></div></div> <p>Next, we define a function, <code class="language-plaintext highlighter-rouge">div_half</code>, to divide an equilibrium line in half, and thus dividing the interpolated points in the left side from those in the right side. Before that, we define some helper functions, <code class="language-plaintext highlighter-rouge">derivative</code> and <code class="language-plaintext highlighter-rouge">min_diff</code>.</p> <p>The <code class="language-plaintext highlighter-rouge">derivative</code> function extracts the x and y values, then calculates the n-th discrete difference between these values using NumPy’s np.diff [<a href="https://numpy.org/doc/stable/reference/generated/numpy.diff.html">3</a>]. The first value of dydx is given by dydx[i] = (y[i+1] - y[i])/(x[i+1] - x[i]) along the given axis and higher differences are calculated by using np.diff recursively.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">derivative</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">points</span><span class="p">):</span>
    <span class="n">points_to_derive</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">interpolate_points</span><span class="p">(</span><span class="n">points</span><span class="p">)</span>

    <span class="c1"># Extract x and y values
</span>    <span class="n">x</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span><span class="p">,</span> <span class="n">_</span> <span class="ow">in</span> <span class="n">points_to_derive</span><span class="p">]</span>
    <span class="n">y</span> <span class="o">=</span> <span class="p">[</span><span class="n">y</span> <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">y</span> <span class="ow">in</span> <span class="n">points_to_derive</span><span class="p">]</span>

    <span class="c1"># Calculate derivative
</span>    <span class="n">dydx</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">diff</span><span class="p">([</span><span class="n">y</span><span class="p">])</span> <span class="o">/</span> <span class="n">np</span><span class="p">.</span><span class="nf">diff</span><span class="p">([</span><span class="n">x</span><span class="p">])</span>

    <span class="k">return</span> <span class="n">dydx</span>
</code></pre></div></div> <p>We can print out dydx to see the output:</p> <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">[[ 8.07876392e+00  9.91114827e+00  9.97451278e+00  4.51091847e+00
   1.09522770e+00  1.76982730e+00  2.31770882e+00  2.10416257e+00
   1.80040740e+00  1.53438056e+00  1.30608205e+00  1.11549839e+00
   9.55399262e-01  8.06655680e-01  6.66140364e-01  5.33853313e-01
   4.09794527e-01  2.93964007e-01  1.86361751e-01  8.69877611e-02
  -4.15796399e-03 -8.70754239e-02 -1.61764619e-01 -2.28225548e-01
  -2.86458213e-01 -3.36462612e-01 -3.78238746e-01 -4.11786615e-01
  -4.37106218e-01 -4.54197557e-01 -4.63120208e-01 -4.67536156e-01
  -4.73172262e-01 -4.80527142e-01 -4.89600797e-01 -5.00393227e-01
  -5.12904432e-01 -5.27134411e-01 -5.43083164e-01 -5.60750693e-01
  -5.80136996e-01 -6.01242073e-01 -6.24065925e-01 -6.48608552e-01
  -6.74869954e-01 -7.02850130e-01 -7.32401516e-01 -7.59965285e-01
  -7.81888545e-01 -7.98004915e-01 -8.08314395e-01 -8.12816985e-01
  -8.11512685e-01 -8.04401495e-01 -7.91483416e-01 -7.72758446e-01
  -7.48226587e-01 -7.17887838e-01 -6.81742198e-01 -6.41050050e-01
  -6.13253772e-01 -6.11090989e-01 -6.34851889e-01 -6.84536470e-01
  -7.60144733e-01 -8.58262632e-01 -9.41062555e-01 -9.84995016e-01
  -9.89704226e-01 -9.55190184e-01 -8.81452890e-01 -7.68773137e-01
  -6.52874028e-01 -6.04095405e-01 -6.30654514e-01 -7.32551355e-01
  -8.96371939e-01 -1.01973228e+00 -1.05544181e+00 -1.00324856e+00
  -8.77619170e-01 -7.75742325e-01 -7.37642801e-01 -7.63444901e-01
  -8.53148625e-01 -9.85768790e-01 -1.04063074e+00 -9.74684100e-01
  -8.15419593e-01 -7.07345594e-01 -6.97690393e-01 -7.86480636e-01
  -9.45780914e-01 -1.04573780e+00]]
</span></code></pre></div></div> <p>Then we use the <code class="language-plaintext highlighter-rouge">min_diff</code> function to find the index of the point that is at the centre of the equilibrium line, which divides it into 2 halves. Starting with an index value of zero and a minimum difference given by the difference between the absolute of the first <code class="language-plaintext highlighter-rouge">dydx</code> value and the average slope, we iterate over the indices of <code class="language-plaintext highlighter-rouge">dydx</code> to find the index of the <code class="language-plaintext highlighter-rouge">dydx</code> value which is closest to the average slope <code class="language-plaintext highlighter-rouge">avg_slope</code>.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">min_diff</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">right_eq_line</span><span class="p">,</span> <span class="n">left_eq_line</span><span class="p">):</span>
    <span class="n">self</span><span class="p">.</span><span class="n">points</span> <span class="o">=</span> <span class="n">right_eq_line</span> <span class="o">+</span> <span class="n">left_eq_line</span>
    <span class="n">dydx</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">derivative</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">points</span><span class="p">)</span>
    <span class="n">avg_slope</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">eq_slope</span><span class="p">(</span><span class="n">right_eq_line</span><span class="p">,</span> <span class="n">left_eq_line</span><span class="p">)</span>

    <span class="n">min_index</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="c1"># Initialize min_diff_value with the first element difference
</span>    <span class="n">min_diff_value</span> <span class="o">=</span> <span class="nf">abs</span><span class="p">(</span><span class="n">dydx</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">avg_slope</span><span class="p">)</span>

    <span class="c1"># Iterate over indices of dydx
</span>    <span class="k">for</span> <span class="n">index</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">dydx</span><span class="p">.</span><span class="n">size</span><span class="p">):</span>
        <span class="n">diff</span> <span class="o">=</span> <span class="nf">abs</span><span class="p">(</span><span class="n">dydx</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">index</span><span class="p">]</span> <span class="o">-</span> <span class="n">avg_slope</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">diff</span> <span class="o">&lt;</span> <span class="n">min_diff_value</span><span class="p">:</span>
            <span class="n">min_diff_value</span> <span class="o">=</span> <span class="n">diff</span>
            <span class="n">min_index</span> <span class="o">=</span> <span class="n">index</span>

    <span class="k">return</span> <span class="n">min_index</span>
</code></pre></div></div> <p>We then define the <code class="language-plaintext highlighter-rouge">div_half</code> function that divides the equilibrium line precisely in half. We use the interpolated points from the <code class="language-plaintext highlighter-rouge">interpolate_points</code> function, which ensures that the point of division is very precise. Then we use the <code class="language-plaintext highlighter-rouge">min_diff</code> function to obtain the index of the point dividing the equilibrium line in half. Using this index, we can halve the interpolated points, and plot two equilibrium lines on the right and left side of the ternary plot using these points.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">div_half</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">right_eq_line</span><span class="p">,</span> <span class="n">left_eq_line</span><span class="p">):</span>
    <span class="c1"># Add the points
</span>    <span class="n">self</span><span class="p">.</span><span class="n">points</span> <span class="o">=</span> <span class="n">right_eq_line</span> <span class="o">+</span> <span class="n">left_eq_line</span>
    <span class="n">interpolated_points</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">interpolate_points</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">points</span><span class="p">)</span>

    <span class="c1"># Use index to separate right and left side
</span>    <span class="n">index</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">min_diff</span><span class="p">(</span><span class="n">right_eq_line</span><span class="p">,</span> <span class="n">left_eq_line</span><span class="p">)</span>
    <span class="n">self</span><span class="p">.</span><span class="n">interpolated_right_side</span> <span class="o">=</span> <span class="n">interpolated_points</span><span class="p">[</span><span class="n">index</span><span class="p">:]</span>
    <span class="n">self</span><span class="p">.</span><span class="n">interpolated_left_side</span> <span class="o">=</span> <span class="n">interpolated_points</span><span class="p">[:</span> <span class="n">index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span>

    <span class="c1"># Plot the curve
</span>    <span class="n">self</span><span class="p">.</span><span class="n">tax</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span>
        <span class="n">self</span><span class="p">.</span><span class="n">interpolated_right_side</span><span class="p">,</span>
        <span class="n">linewidth</span><span class="o">=</span><span class="mf">1.0</span><span class="p">,</span>
        <span class="n">color</span><span class="o">=</span><span class="sh">"</span><span class="s">blue</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">Right interpolated curve</span><span class="sh">"</span><span class="p">,</span>
    <span class="p">)</span>
    <span class="n">self</span><span class="p">.</span><span class="n">tax</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span>
        <span class="n">self</span><span class="p">.</span><span class="n">interpolated_left_side</span><span class="p">,</span>
        <span class="n">linewidth</span><span class="o">=</span><span class="mf">1.0</span><span class="p">,</span>
        <span class="n">color</span><span class="o">=</span><span class="sh">"</span><span class="s">orange</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">Left interpolated curve</span><span class="sh">"</span><span class="p">,</span>
    <span class="p">)</span>
</code></pre></div></div> <p>We obtain the following ternary plot:</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog_pics/2024-05-29-Fqlearn-Ternary-Plot/div_half-480.webp 480w,/assets/img/blog_pics/2024-05-29-Fqlearn-Ternary-Plot/div_half-800.webp 800w,/assets/img/blog_pics/2024-05-29-Fqlearn-Ternary-Plot/div_half-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/blog_pics/2024-05-29-Fqlearn-Ternary-Plot/div_half.png" width="100%" height="auto" alt="Halving interpolated points" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> <figcaption class="caption">Dividing the interpolated points in half</figcaption> </figure> <h2 id="conclusion">Conclusion</h2> <h3 id="acknowledgements">Acknowledgements</h3> <p>I would like to thank the <a href="https://opensciencelabs.org/">Open Science Labs</a> and <a href="https://thegraphnetwork.org/">The Graph Network</a> for giving me the opportunity to learn and gain experience in open source through this internship. I also thank <a href="https://github.com/EverVino">Ever Vino</a> for his guidance and mentorship throughout the internship program.</p> <h3 id="references">References</h3> <p>[1] Ternary plots - Wikipedia: <a href="https://en.wikipedia.org/wiki/Ternary_plot">https://en.wikipedia.org/wiki/Ternary_plot</a></p> <p>[2] scipy.interpolate.CubicSpline - SciPy v1.13.1 Manual: <a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.CubicSpline.html">https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.CubicSpline.html</a></p> <p>[3] numpy.diff - NumPy v1.26 Manual: <a href="https://numpy.org/doc/stable/reference/generated/numpy.diff.html">https://numpy.org/doc/stable/reference/generated/numpy.diff.html</a></p>]]></content><author><name></name></author><category term="open science"/><category term="visualization"/><category term="thermodynamics"/><summary type="html"><![CDATA[an article on how to use the open source Fqlearn library to plot three phase diagrams used in thermodynamics, also known as ternary plots]]></summary></entry><entry><title type="html">your journey into research&amp;amp;#58 lessons to live by - key takeaways</title><link href="https://faithhunja.github.io/blog/2024/C4AI-Roads-To-Research-Talk1/" rel="alternate" type="text/html" title="your journey into research&amp;amp;#58 lessons to live by - key takeaways"/><published>2024-05-09T00:00:00+00:00</published><updated>2024-05-09T00:00:00+00:00</updated><id>https://faithhunja.github.io/blog/2024/C4AI-Roads-To-Research-Talk1</id><content type="html" xml:base="https://faithhunja.github.io/blog/2024/C4AI-Roads-To-Research-Talk1/"><![CDATA[<p>Note: This article originally appeared in Cohere for AI’s LinkedIn Pulse blog <a href="https://www.linkedin.com/pulse/your-journey-research-lessons-live-key-takeaways-cohere-for-ai-mnh5c/">here</a>.</p> <hr/> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog_pics/2024-05-09-C4AI-Roads-To-Research-Talk1/intro%20image-480.webp 480w,/assets/img/blog_pics/2024-05-09-C4AI-Roads-To-Research-Talk1/intro%20image-800.webp 800w,/assets/img/blog_pics/2024-05-09-C4AI-Roads-To-Research-Talk1/intro%20image-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/blog_pics/2024-05-09-C4AI-Roads-To-Research-Talk1/intro%20image.png" width="100%" height="auto" alt="C4AI Roads To Research" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> <figcaption class="caption">C4AI Roads To Research inaugural series by Sara Hooker</figcaption> </figure> <h3 id="introduction">Introduction</h3> <p>Typically, if you want to get into research full-time, you have to choose between industry and academia. However, to be considered, you have to follow a narrow rubric that requires choices that have to be made very early in your career, and in a very precise and timely manner.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog_pics/2024-05-09-C4AI-Roads-To-Research-Talk1/research%20journey-480.webp 480w,/assets/img/blog_pics/2024-05-09-C4AI-Roads-To-Research-Talk1/research%20journey-800.webp 800w,/assets/img/blog_pics/2024-05-09-C4AI-Roads-To-Research-Talk1/research%20journey-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/blog_pics/2024-05-09-C4AI-Roads-To-Research-Talk1/research%20journey.png" width="100%" height="auto" alt="Research journey path" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> <figcaption class="caption">Typical path to get into research</figcaption> </figure> <p>But what happens to most people who are left out because of this rubric? The “Cohere For AI: Roads to Research” series demystifies this rubric and aims to create new spaces where state-of-the-art research happens and empower more entry points into machine learning research.</p> <h3 id="how-do-you-decide-what-to-work-on">How do you decide what to work on?</h3> <p>For a beginner in research, it is recommended to decide based on people you would like to work with, or a research question that you find interesting, rather than a specific sub-domain. Working with people who are more advanced in research than you are will help you learn much faster. For your first project, you would also want to get up to speed in one domain, instead of being general in your learning. This will teach you how to iterate end-to-end in any given topic. Also, it is best not to be attached to a particular domain, considering how domain popularity changes very quickly.</p> <blockquote> <p>Once you decide on a research topic, become an expert in your research scope by spending 2-3 weeks on it. Get your foundations down by focusing on related work, datasets, and baselines.</p> </blockquote> <h3 id="what-makes-a-scientific-question-interesting">What makes a scientific question interesting?</h3> <p>This ultimately depends on you and your opinion, but generally, the following points can be used as a guide. A research question should not be about small incremental improvements to, or small pivots of existing research. Instead, it should be something you care about and inform a wider perspective of the field. A research question could also interest you because of intelligent and passionate collaborators working on it who make you feel like you have something to learn from them.</p> <h3 id="best-practices-for-your-first-research-project">Best practices for your first research project</h3> <p>For your first research project, it is better to narrow it down to one project instead of doing a lot of things. You can reach out with ideas to more experienced researchers, but often collaborating on someone else’s idea is more valuable. Invest in your engineering skills which will speed up your iteration when working on ideas. When presenting your work, be thoroughly prepared and communicate both your successes and failures. Keep your collaborators up to date with a rolling slide deck, and always give recaps of your progress since the previous meetings, while restating the big picture question at the beginning of your meetings. Try to always prepare something to present; it could be questions, or even live sharing code, or just saying that you are still trying to figure out things if nothing worked out.</p> <blockquote> <p>Most success in life comes not from being consistently great, but rather from being great at being consistent.</p> </blockquote> <h3 id="how-do-you-find-collaborators-or-mentors">How do you find collaborators or mentors?</h3> <p>You could contact authors you admire by email, at least once a month. Presenting your knowledge by writing technical blog posts, teaching, or sharing your work will enable people to find you. Finding peers to start collaborating on a project, and then inviting a mentor after some initial experiments could also work. Remember that it is important to know exactly why you are seeking mentorship since that will affect the timescale and nature of the relationship. Once you have advanced in research, pay it forward if you can by mentoring others.</p> <h3 id="applying-for-research-internships-and-phds">Applying for research internships and PhDs</h3> <p>You can start by emailing professors or authors you want to work with, to ask if they are supervising incoming students. You should read their papers beforehand, and show that you are familiar with their work. References matter a lot and will be stronger if someone has actively worked with you and knows your work. They will advocate for you, so you need to work with people who care about your future. It is important to learn to speak about the bigger picture regarding your work. Think about how you can communicate your main research questions in an accessible way, instead of narrowly focusing on the specific task you previously looked at. Internships typically run for short periods, like 3 months, so you will normally work on someone else’s idea instead of developing your own. In this case, it is important to figure out if you are excited about the project you will work on. However, for PhD programs which typically have a longer time commitment, it is advisable to speak to students in the program to understand if there’s a fit. The research community is small, so treat each process as a learning curve. A rejection is not the end of the road, since you will likely find another opportunity.</p> <h3 id="attending-conferences">Attending conferences</h3> <p>If you know someone who you would like to catch up with is attending a conference you plan to attend, reach out to them beforehand for a coffee. Ideally, you should be familiar with their research and the papers they’ve written. Poster sessions are the best to meet other researchers. You don’t need to feel pressured to attend everything at a conference, since it is not possible to do so in the first place. Try to connect with others in a way that feels comfortable to you. Also, you don’t always have to talk about research with those you meet.</p> <blockquote> <p>Research involves many failures before you encounter success.</p> </blockquote> <h3 id="how-do-you-preserve-your-sense-of-self-when-experiencing-failure">How do you preserve your sense of self when experiencing failure?</h3> <p>Teach while you learn. This can be through writing technical blog posts, offering mentorship, or giving short talks about technical subjects. You don’t have to know everything to give back the knowledge you have. Try to work on problems you care about. You can also periodically meet someone you are not directly collaborating with casually, or over coffee chats.</p> <h3 id="notes">Notes</h3> <p>For a recording of the full session, visit <a href="https://www.youtube.com/watch?v=iawtG6GL-Jc">here</a></p>]]></content><author><name></name></author><category term="machine learning"/><category term="research"/><category term="Cohere for AI"/><summary type="html"><![CDATA[a discussion on lessons to live by in your journey into research, held during the inaugural session of the 'Cohere for AI&#58 Roads to Research' series]]></summary></entry></feed>